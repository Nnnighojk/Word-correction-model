# -*- coding: utf-8 -*-
"""seq2seq(prediction).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wb6edTJ3lYpSOjruUqFeqZGrDkwJyrJn
"""

!pip install --upgrade txt2txt

import pandas as pd
data=pd.read_csv('stanford-sentiment-treebank.train.csv')
data['polarity']=0
#data['id']=0

data.head()



for i in range(len(data)):
    #data.ix[i,'id']=i
    if data.ix[i,'sentiment']=='positive':
        data.ix[i,'polarity']=1
    elif data.ix[i,'coarse']=='neutral':
        data.ix[i,'polarity']=0
    else:
      data.ix[i,'polarity']=-1
data.head()

import numpy as np  
max_seq_length=0
for i in range(len(data)):
    if len(data.iloc[i,0])>max_seq_length:
        max_seq_length=len(data.iloc[i,0])
train_text = data['phrase'].tolist()
train_text = [' '.join(t.split()[0:max_seq_length]) for t in train_text]
#train_text = np.array(train_text, dtype=object)[:, np.newaxis]
#train_label = data[0:25000]['polarity'].tolist()

chars=['abcdefghijklmnopqrstuvwxyz1234567890']

for j in range(len(train_text)):
  #print(train_text[j])
  train_text[j]=train_text[j].lower()
  for i in range(len(train_text[j])):
    #continue
    if train_text[j][i] not in chars:
      train_text[j]=train_text[j].replace(train_text[j][i], " ")
      #print(train_text[j])

train_text[3]

from txt2txt import build_params, build_model, convert_training_data
from keras.callbacks import ModelCheckpoint

input_data=train_text
output_data=train_text

build_params(input_data = input_data, output_data = output_data, params_path = 'params', max_lenghts=(10, 10))
    
model, params = build_model(params_path='params')

input_data, output_data = convert_training_data(input_data, output_data, params)
    
checkpoint = ModelCheckpoint('checkpoint', monitor='val_acc', verbose=1, save_best_only=True, mode='max')
callbacks_list = [checkpoint]

model.fit(input_data, output_data, validation_data=(input_data, output_data), batch_size=2, epochs=2, callbacks=callbacks_list)

from txt2txt import build_model, infer
model, params = build_model(params_path='params')
model.load_weights('checkpoint')
#infer('nmae', model, params)

infer('nmae', model, params)